using System;
using System.Text;

namespace Mastermind.Application
{
    public class GuessResult : IEquatable<GuessResult>
    {
        #region Properties
        public int ExactlyRight { get; set; } = 0;
        public int SortaRight { get; set; } = 0;
        public int CompletelyWrong { get; set; } = 0;
        #endregion

        #region Wrapper Properties
        public bool WasRight => CompletelyWrong == 0 && SortaRight == 0;
        #endregion

        #region Overrides
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();

            for (int i = 0; i < ExactlyRight; i++)
                sb.Append("+");

            for (int i = 0; i < SortaRight; i++)
                sb.Append("-");

            // We indirectly tell the user that they got something completely wrong
            // by not giving them anything for such digits.

            return sb.ToString();
        }
        #endregion

        #region Operators
        public static implicit operator string(GuessResult result) => result.ToString();
        #endregion

        #region IEquatable Implementation
        // This is the code generated by ReSharper, I can't take any credit for it.
        // The solver uses this to remove guesses that would not produce the same
        // result.
        public bool Equals(GuessResult other)
        {
            if(ReferenceEquals(null, other)) return false;
            if(ReferenceEquals(this, other)) return true;
            return ExactlyRight == other.ExactlyRight && SortaRight == other.SortaRight && CompletelyWrong == other.CompletelyWrong;
        }

        public override bool Equals(object obj)
        {
            if(ReferenceEquals(null, obj)) return false;
            if(ReferenceEquals(this, obj)) return true;
            if(obj.GetType() != this.GetType()) return false;
            return Equals((GuessResult)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = ExactlyRight;
                hashCode = (hashCode * 397) ^ SortaRight;
                hashCode = (hashCode * 397) ^ CompletelyWrong;
                return hashCode;
            }
        }
        #endregion
    }
}
